enum Level {
  easy
  intermediate
  hard
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Deleted {
  deletedCount: Int
}

type Query {
  "Returns all courses"
  getCourses: [Course],
  "Returns one course"
  getCourse(_id: ID!): Course,
  "Returns all Students"
  getPeople: [Person],
  "Returns one Student"
  getPerson(_id: ID!): Person
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  # Creates a Course
  createCourse(input: CourseInput!): Course,
  # Edits a Course
  editCourse(_id: ID!, input: CourseEditInput!): Course,
  # Deletes a Course
  deleteCourse(_id: ID!): Deleted,
  # Creates a Person
  createPerson(input: PersonInput!): Person,
  # Edits a Person
  editPerson(_id: ID!, input: PersonEditInput!): Person,
  # Deletes a Person
  deletePerson(_id: ID!): Deleted,
  # Adds Person to Course
  addPersonToCourse(personID: ID!, courseID: ID!): Course,
}